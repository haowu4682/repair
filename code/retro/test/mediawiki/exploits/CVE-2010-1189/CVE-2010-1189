CVE-2010-1189: info disclosure

http://lists.wikimedia.org/pipermail/mediawiki-announce/2010-March/000088.html

MediaWiki before 1.15.2 does not prevent wiki editors from linking
to images from other web sites in wiki pages, which allows editors to obtain IP
addresses and other information of wiki users by adding a link to an image on an
attacker-controlled web site, aka "CSS validation issue."

----

taesoo@pc:~/tmp/.../test/mediawiki :($ diff -u mediawiki-1.15.1/includes/Sanitizer.php mediawiki-1.15.2/includes/Sanitizer.php 
--- mediawiki-1.15.1/includes/Sanitizer.php	2009-01-06 21:31:30.000000000 -0500
+++ mediawiki-1.15.2/includes/Sanitizer.php	2010-03-08 17:34:15.000000000 -0500
@@ -658,24 +658,48 @@
 	 * @return mixed
 	 */
 	static function checkCss( $value ) {
-		$stripped = Sanitizer::decodeCharReferences( $value );
+		$value = Sanitizer::decodeCharReferences( $value );
 
 		// Remove any comments; IE gets token splitting wrong
-		$stripped = StringUtils::delimiterReplace( '/*', '*/', ' ', $stripped );
+		$value = StringUtils::delimiterReplace( '/*', '*/', ' ', $value );
 
-		$value = $stripped;
-
-		// ... and continue checks
-		$stripped = preg_replace( '!\\\\([0-9A-Fa-f]{1,6})[ \\n\\r\\t\\f]?!e',
-			'codepointToUtf8(hexdec("$1"))', $stripped );
-		$stripped = str_replace( '\\', '', $stripped );
-		if( preg_match( '/(?:expression|tps*:\/\/|url\\s*\().*/is',
-				$stripped ) ) {
-			# haxx0r
+		// Decode escape sequences and line continuation
+		// See the grammar in the CSS 2 spec, appendix D, Mozilla implements it accurately.
+		// IE 8 doesn't implement it at all, but there's no way to introduce url() into
+		// IE that doesn't hit Mozilla also.
+		static $decodeRegex;
+		if ( !$decodeRegex ) {
+			$space = '[\\x20\\t\\r\\n\\f]';
+			$nl = '(?:\\n|\\r\\n|\\r|\\f)';
+			$backslash = '\\\\';
+			$decodeRegex = "/ $backslash 
+				(?:
+					($nl) |  # 1. Line continuation
+					([0-9A-Fa-f]{1,6})$space? |  # 2. character number
+					(.) # 3. backslash cancelling special meaning
+				)/xu";
+		}
+		$decoded = preg_replace_callback( $decodeRegex, 
+			array( __CLASS__, 'cssDecodeCallback' ), $value );
+		if ( preg_match( '!expression|https?://|url\s*\(!i', $decoded ) ) {
+			// Not allowed
 			return false;
+		} else {
+			// Allowed, return CSS with comments stripped
+			return $value;
 		}
+	}
 
-		return $value;
+	static function cssDecodeCallback( $matches ) {
+		if ( $matches[1] !== '' ) {
+			return '';
+		} elseif ( $matches[2] !== '' ) {
+			return codepointToUtf8( hexdec( $matches[2] ) );
+		} elseif ( $matches[3] !== '' ) {
+			return $matches[3];
+		} else {
+			throw new MWException( __METHOD__.': invalid match' );
+		}
 	}
 
 	/**

----
1. $wgAllowExternalImagesFrom is supposed to prevent rendering external images
ex) [http://www.google.com/intl/en_ALL/images/logos/images_logo_lg.gif]
2. in case users allowed css
ex) $wgAllowUserCss = true;
3. css using external images should be blocked if $wgAllowExternalImagesFrom is not true
