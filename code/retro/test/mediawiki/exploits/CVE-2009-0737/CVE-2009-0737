CVE-2009-0737: xss

----

1.12.3: A number of cross-site scripting (XSS) security vulnerabilities were discovered 
in the web-based installer (config/index.php). These vulnerabilities all 
require a live installer -- once the installer has been used to install a wiki, 
it is deactivated.

Note that cross-site scripting vulnerabilities can be used to attack any website
in the same cookie domain. So if you have an uninstalled copy of MediaWiki on
the same site as an active web service, MediaWiki could be used to attack the
active service.

If you are hosting an old copy of MediaWiki that you have never installed, you 
are advised to remove it from the web.

----
diff mediawiki-1.13.3/config/index.php mediawiki-1.13.4/config/index.php | grep htmlspe

+       <title>MediaWiki <?php echo htmlspecialchars( $wgVersion ); ?> Installation</title>
+<h1>MediaWiki <?php print htmlspecialchars( $wgVersion ) ?> Installation</h1>
+print "<li>PHP " . htmlspecialchars( phpversion() ) . " installed</li>\n";
+$sapi = htmlspecialchars( php_sapi_name() );
+               print "<li>Database type: " . htmlspecialchars( $conf->DBtypename ) . "</li>\n";
+               print "<li>Loading class: " . htmlspecialchars( $dbclass ) . "</li>\n";
+                       echo( "<li>Attempting to connect to database server as " . htmlspecialchars( $db_user ) . "..." );
+                                               echo( htmlspecialchars( "failed with error [$errno] $errtx." ) . "</li>\n" );
+                                       htmlspecialchars( $wgDBsuperuser ) . "\"..." );
+                                       print " error: " . htmlspecialchars( $wgDatabase->lastError() ) . "</li>\n";
+                       echo( "<li>Attempting to connect to database \"" . htmlspecialchars( $wgDBname ) . 
+                               "\" as \"" . htmlspecialchars( $wgDBuser ) . "\"..." );
+                               print " error: " . htmlspecialchars( $wgDatabase->lastError() ) . "</li>\n";
+               print "<li>Connected to " . htmlspecialchars( $myver );
+                                               $encExisting = htmlspecialchars( $existingSchema );
+                                               $encRequested = htmlspecialchars( $conf->DBschema );
+                                               $encExisting = htmlspecialchars( $existingEngine );
+                                               $encRequested = htmlspecialchars( $conf->DBengine );
+                                       echo "<li><strong>Warning:</strong> " . htmlspecialchars( $conf->DBengine ) . 
+                                       echo( "<li>User " . htmlspecialchars( $wgDBuser ) . " exists. Skipping grants.</li>\n" );
+                                       echo( "<li>" . htmlspecialchars( "Granting user permissions to $wgDBuser on $wgDBname..." ) );
+                               $encCode = htmlspecialchars( $code );
+                               $encName = htmlspecialchars( $name );
+               print "\t<span class='error'>" . htmlspecialchars( $errs['DBpicktype'] ) . "</span>\n";
+               echo "<span class='error'>" . htmlspecialchars( $errs[$field] ) . "</span>\n";
+               echo "<li>Connected to memcached on " . htmlspecialchars( "$host:$port" ) ." successfully</li>";

----
# pick 'DBtype' and xss!
